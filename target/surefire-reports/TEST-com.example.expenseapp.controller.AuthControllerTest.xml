<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.example.expenseapp.controller.AuthControllerTest" time="13.921" tests="20" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="MS950"/>
    <property name="java.class.path" value="C:\Users\Kevin\IdeaProjects\expense-app-backend\target\test-classes;C:\Users\Kevin\IdeaProjects\expense-app-backend\target\classes;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.5\spring-boot-starter-web-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.5\spring-boot-starter-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot\3.4.5\spring-boot-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.5\spring-boot-autoconfigure-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.5\spring-boot-starter-logging-3.4.5.jar;C:\Users\Kevin\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Kevin\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Kevin\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Kevin\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Kevin\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Kevin\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Kevin\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.5\spring-boot-starter-json-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.3\jackson-datatype-jdk8-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.3\jackson-datatype-jsr310-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.3\jackson-module-parameter-names-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.5\spring-boot-starter-tomcat-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.40\tomcat-embed-core-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.40\tomcat-embed-el-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.40\tomcat-embed-websocket-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-web\6.2.6\spring-web-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-beans\6.2.6\spring-beans-6.2.6.jar;C:\Users\Kevin\.m2\repository\io\micrometer\micrometer-observation\1.14.6\micrometer-observation-1.14.6.jar;C:\Users\Kevin\.m2\repository\io\micrometer\micrometer-commons\1.14.6\micrometer-commons-1.14.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-webmvc\6.2.6\spring-webmvc-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-context\6.2.6\spring-context-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-expression\6.2.6\spring-expression-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.5\spring-boot-starter-data-jpa-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.5\spring-boot-starter-jdbc-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-jdbc\6.2.6\spring-jdbc-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\hibernate\orm\hibernate-core\6.6.13.Final\hibernate-core-6.6.13.Final.jar;C:\Users\Kevin\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Kevin\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Kevin\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Kevin\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Kevin\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Kevin\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Kevin\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Kevin\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\data\spring-data-jpa\3.4.5\spring-data-jpa-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\data\spring-data-commons\3.4.5\spring-data-commons-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-orm\6.2.6\spring-orm-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-tx\6.2.6\spring-tx-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-aspects\6.2.6\spring-aspects-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\Kevin\.m2\repository\com\mysql\mysql-connector-j\9.1.0\mysql-connector-j-9.1.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.4.5\spring-boot-starter-security-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-aop\6.2.6\spring-aop-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-config\6.4.5\spring-security-config-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-web\6.4.5\spring-security-web-6.4.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.3\jackson-databind-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.3\jackson-annotations-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.3\jackson-core-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-mail\3.4.5\spring-boot-starter-mail-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-context-support\6.2.6\spring-context-support-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\eclipse\angus\jakarta.mail\2.0.3\jakarta.mail-2.0.3.jar;C:\Users\Kevin\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Kevin\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Kevin\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\Kevin\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Kevin\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.2.0\springdoc-openapi-starter-webmvc-ui-2.2.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.2.0\springdoc-openapi-starter-webmvc-api-2.2.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.2.0\springdoc-openapi-starter-common-2.2.0.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.15\swagger-core-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.15\swagger-annotations-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.15\swagger-models-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.18.3\jackson-dataformat-yaml-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\webjars\swagger-ui\5.2.0\swagger-ui-5.2.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.5\spring-boot-starter-test-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-test\3.4.5\spring-boot-test-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.5\spring-boot-test-autoconfigure-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Kevin\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Kevin\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Kevin\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Kevin\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Kevin\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\Kevin\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Kevin\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Kevin\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\Kevin\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\Kevin\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\Kevin\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\Kevin\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Kevin\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-core\6.2.6\spring-core-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-jcl\6.2.6\spring-jcl-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-test\6.2.6\spring-test-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-test\6.4.5\spring-security-test-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-core\6.4.5\spring-security-core-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-crypto\6.4.5\spring-security-crypto-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-inline\5.2.0\mockito-inline-5.2.0.jar;"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="user.timezone" value="Asia/Taipei"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 10"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="user.country" value="TW"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.7.6-hotspot\bin"/>
    <property name="sun.java.command" value="C:\Users\Kevin\AppData\Local\Temp\surefire9120398323493425344\surefirebooter-20251003140305496_3.jar C:\Users\Kevin\AppData\Local\Temp\surefire9120398323493425344 2025-10-03T14-03-05_344-jvmRun1 surefire-20251003140305496_1tmp surefire_0-20251003140305496_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\Kevin\IdeaProjects\expense-app-backend\target\test-classes;C:\Users\Kevin\IdeaProjects\expense-app-backend\target\classes;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.5\spring-boot-starter-web-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.5\spring-boot-starter-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot\3.4.5\spring-boot-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.5\spring-boot-autoconfigure-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.5\spring-boot-starter-logging-3.4.5.jar;C:\Users\Kevin\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Kevin\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Kevin\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Kevin\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Kevin\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Kevin\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Kevin\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.5\spring-boot-starter-json-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.3\jackson-datatype-jdk8-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.3\jackson-datatype-jsr310-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.3\jackson-module-parameter-names-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.5\spring-boot-starter-tomcat-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.40\tomcat-embed-core-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.40\tomcat-embed-el-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.40\tomcat-embed-websocket-10.1.40.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-web\6.2.6\spring-web-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-beans\6.2.6\spring-beans-6.2.6.jar;C:\Users\Kevin\.m2\repository\io\micrometer\micrometer-observation\1.14.6\micrometer-observation-1.14.6.jar;C:\Users\Kevin\.m2\repository\io\micrometer\micrometer-commons\1.14.6\micrometer-commons-1.14.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-webmvc\6.2.6\spring-webmvc-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-context\6.2.6\spring-context-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-expression\6.2.6\spring-expression-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.5\spring-boot-starter-data-jpa-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.5\spring-boot-starter-jdbc-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-jdbc\6.2.6\spring-jdbc-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\hibernate\orm\hibernate-core\6.6.13.Final\hibernate-core-6.6.13.Final.jar;C:\Users\Kevin\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Kevin\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Kevin\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Kevin\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Kevin\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Kevin\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Kevin\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Kevin\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Kevin\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\data\spring-data-jpa\3.4.5\spring-data-jpa-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\data\spring-data-commons\3.4.5\spring-data-commons-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-orm\6.2.6\spring-orm-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-tx\6.2.6\spring-tx-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-aspects\6.2.6\spring-aspects-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\aspectj\aspectjweaver\1.9.24\aspectjweaver-1.9.24.jar;C:\Users\Kevin\.m2\repository\com\mysql\mysql-connector-j\9.1.0\mysql-connector-j-9.1.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-security\3.4.5\spring-boot-starter-security-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-aop\6.2.6\spring-aop-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-config\6.4.5\spring-security-config-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-web\6.4.5\spring-security-web-6.4.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\Kevin\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.3\jackson-databind-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.3\jackson-annotations-2.18.3.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.3\jackson-core-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-mail\3.4.5\spring-boot-starter-mail-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-context-support\6.2.6\spring-context-support-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\eclipse\angus\jakarta.mail\2.0.3\jakarta.mail-2.0.3.jar;C:\Users\Kevin\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Kevin\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Kevin\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.1.Final\hibernate-validator-8.0.1.Final.jar;C:\Users\Kevin\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Kevin\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-ui\2.2.0\springdoc-openapi-starter-webmvc-ui-2.2.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-webmvc-api\2.2.0\springdoc-openapi-starter-webmvc-api-2.2.0.jar;C:\Users\Kevin\.m2\repository\org\springdoc\springdoc-openapi-starter-common\2.2.0\springdoc-openapi-starter-common-2.2.0.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-core-jakarta\2.2.15\swagger-core-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-annotations-jakarta\2.2.15\swagger-annotations-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\io\swagger\core\v3\swagger-models-jakarta\2.2.15\swagger-models-jakarta-2.2.15.jar;C:\Users\Kevin\.m2\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.18.3\jackson-dataformat-yaml-2.18.3.jar;C:\Users\Kevin\.m2\repository\org\webjars\swagger-ui\5.2.0\swagger-ui-5.2.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.5\spring-boot-starter-test-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-test\3.4.5\spring-boot-test-3.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.5\spring-boot-test-autoconfigure-3.4.5.jar;C:\Users\Kevin\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Kevin\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Kevin\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Kevin\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Kevin\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Kevin\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\Kevin\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Kevin\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Kevin\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\Kevin\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\Kevin\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\Kevin\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\Kevin\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\Kevin\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Kevin\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-core\6.2.6\spring-core-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-jcl\6.2.6\spring-jcl-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\springframework\spring-test\6.2.6\spring-test-6.2.6.jar;C:\Users\Kevin\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-test\6.4.5\spring-security-test-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-core\6.4.5\spring-security-core-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\springframework\security\spring-security-crypto\6.4.5\spring-security-crypto-6.4.5.jar;C:\Users\Kevin\.m2\repository\org\mockito\mockito-inline\5.2.0\mockito-inline-5.2.0.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Kevin"/>
    <property name="user.language" value="zh"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.7.6-hotspot"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\Kevin\IdeaProjects\expense-app-backend"/>
    <property name="style.color" value="always"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\Kevin\AppData\Local\Temp\surefire9120398323493425344\surefirebooter-20251003140305496_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.7+6-LTS"/>
    <property name="user.name" value="Kevin"/>
    <property name="stdout.encoding" value="MS950"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-21.0.7+6"/>
    <property name="maven.ext.class.path" value="C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2025.2\plugins\maven\lib\maven-event-listener.jar"/>
    <property name="localRepository" value="C:\Users\Kevin\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="C:\Users\Kevin\AppData\Local\Temp\"/>
    <property name="idea.version" value="2025.2.2"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="21.0.7"/>
    <property name="user.dir" value="C:\Users\Kevin\IdeaProjects\expense-app-backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="jansi.passthrough" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="13932"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="MS950"/>
    <property name="java.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.7.6-hotspot\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Eclipse Adoptium\jdk-21.0.7.6-hotspot\\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;C:\apache-maven\apache-maven-3.9.11\bin;C:\Program Files\Eclipse Adoptium\jdk-21.0.7.6-hotspot\\bin;C:\apache-maven\apache-maven-3.9.11\bin;C:\Users\Kevin\AppData\Local\Microsoft\WindowsApps;C:\Users\Kevin\AppData\Roaming\npm;C:\Users\Kevin\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2025.2\bin;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="MS950"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="21.0.7+6-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="maven.repo.local" value="C:\Users\Kevin\.m2\repository"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="testResetPassword_InvalidToken" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.513">
    <system-out><![CDATA[14:03:06.770 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.example.expenseapp.controller.AuthControllerTest]: AuthControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
14:03:07.064 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.example.expenseapp.ExpenseAppApplication for test class com.example.expenseapp.controller.AuthControllerTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.5)

2025-10-03T14:03:07.635+08:00  INFO 13932 --- [           main] c.e.e.controller.AuthControllerTest      : Starting AuthControllerTest using Java 21.0.7 with PID 13932 (started by Kevin in C:\Users\Kevin\IdeaProjects\expense-app-backend)
2025-10-03T14:03:07.638+08:00  INFO 13932 --- [           main] c.e.e.controller.AuthControllerTest      : No active profile set, falling back to 1 default profile: "default"
2025-10-03T14:03:09.014+08:00  INFO 13932 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-03T14:03:09.092+08:00  INFO 13932 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 64 ms. Found 3 JPA repository interfaces.
2025-10-03T14:03:11.454+08:00  INFO 13932 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-10-03T14:03:12.689+08:00  INFO 13932 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@11c999da
2025-10-03T14:03:12.691+08:00  INFO 13932 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-10-03T14:03:12.761+08:00  INFO 13932 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-03T14:03:12.869+08:00  INFO 13932 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.13.Final
2025-10-03T14:03:13.091+08:00  INFO 13932 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-10-03T14:03:13.358+08:00  INFO 13932 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-03T14:03:13.497+08:00  INFO 13932 --- [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.43
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-03T14:03:14.669+08:00  INFO 13932 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-03T14:03:14.673+08:00  INFO 13932 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-03T14:03:15.307+08:00  INFO 13932 --- [           main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-03T14:03:15.307+08:00  WARN 13932 --- [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-03T14:03:15.439+08:00  INFO 13932 --- [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-03T14:03:18.200+08:00  INFO 13932 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-10-03T14:03:18.201+08:00  INFO 13932 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-10-03T14:03:18.202+08:00  INFO 13932 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
2025-10-03T14:03:18.243+08:00  INFO 13932 --- [           main] c.e.e.controller.AuthControllerTest      : Started AuthControllerTest in 11.008 seconds (process running for 12.391)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
]]></system-out>
    <system-err><![CDATA[Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build what is described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
WARNING: A Java agent has been loaded dynamically (C:\Users\Kevin\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
]]></system-err>
  </testcase>
  <testcase name="testVerifyEmail_InvalidToken" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.034">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
]]></system-out>
  </testcase>
  <testcase name="testForgotPassword_EmailNotFound" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.042">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testResendVerification_AlreadyVerified" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.081">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testLogin_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.306">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    update
        users 
    set
        avatar_url=?,
        email=?,
        google_id=?,
        last_login_at=?,
        name=?,
        password=?,
        provider=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testResetPassword_ExpiredToken" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.115">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
]]></system-out>
  </testcase>
  <testcase name="testVerifyEmail_ExpiredToken" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.057">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
]]></system-out>
  </testcase>
  <testcase name="testLogin_UserNotFound" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.039">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testLogin_WrongPassword" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.157">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testResetPassword_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.248">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    update
        verification_tokens 
    set
        expires_at=?,
        token=?,
        token_type=?,
        used_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        users 
    set
        avatar_url=?,
        email=?,
        google_id=?,
        last_login_at=?,
        name=?,
        password=?,
        provider=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="testVerifyEmail_UsedToken" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.119">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
]]></system-out>
  </testcase>
  <testcase name="testRegister_EmailExists" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.041">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
]]></system-out>
  </testcase>
  <testcase name="testLogin_AccountNotVerified" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.135">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testVerifyEmail_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.041">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.token=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    update
        verification_tokens 
    set
        expires_at=?,
        token=?,
        token_type=?,
        used_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        users 
    set
        avatar_url=?,
        email=?,
        google_id=?,
        last_login_at=?,
        name=?,
        password=?,
        provider=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
]]></system-out>
  </testcase>
  <testcase name="testRegister_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.103">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
]]></system-out>
  </testcase>
  <testcase name="testForgotPassword_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.034">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
]]></system-out>
  </testcase>
  <testcase name="testResendVerification_EmailNotFound" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.024">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
]]></system-out>
  </testcase>
  <testcase name="testResendVerification_Success" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.044">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0 
    where
        vt1_0.user_id=?
Hibernate: 
    insert 
    into
        verification_tokens
        (created_at, expires_at, token, token_type, used_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?)
]]></system-out>
  </testcase>
  <testcase name="testRegister_ValidationFailed" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.039">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    delete 
    from
        verification_tokens 
    where
        id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    delete 
    from
        users 
    where
        id=?
]]></system-out>
  </testcase>
  <testcase name="testRegister_UsernameExists" classname="com.example.expenseapp.controller.AuthControllerTest" time="0.031">
    <system-out><![CDATA[Hibernate: 
    select
        vt1_0.id,
        vt1_0.created_at,
        vt1_0.expires_at,
        vt1_0.token,
        vt1_0.token_type,
        vt1_0.used_at,
        vt1_0.user_id 
    from
        verification_tokens vt1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.avatar_url,
        u1_0.created_at,
        u1_0.email,
        u1_0.google_id,
        u1_0.last_login_at,
        u1_0.name,
        u1_0.password,
        u1_0.provider,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    insert 
    into
        users
        (avatar_url, created_at, email, google_id, last_login_at, name, password, provider, status, updated_at, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
]]></system-out>
  </testcase>
</testsuite>